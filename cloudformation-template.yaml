Description: Launch ElasticSearch opsworks stack within its own VPC or an existing VPC

Parameters:
  
  #ElasticSearch
  CookbookUrl:
    Type: String
    Default: 'https://github.com/netbears/opsworks-elasticsearch/releases/download/v1.0.0/cookbooks-v1.0.0.tar.gz'

  ClusterName:
    Type: String
    Default: 'es'

  SnapshotBucketName:
    Type: String
    Default: netbears-elasticsearch-backup-staging

  LoadBalancerType:
    Type: String
    Default: internal
    AllowedValues:
      - internal
      - external

  HostType:
    Type: String
    Default: private-ip
    AllowedValues:
      - private-ip
      - public-ip
    Description: It is recommended to not use public IPs for hosts, but you have the option to use public IPs as well if needed

  InstanceType:
    Type: String
    Default: 'i3.large'
    AllowedValues:
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge

  InstanceRootVolumeSize:
    Type: String
    Default: '50'
    Description: Size in GB of the root volume

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy the stack in

  SubnetIdHost:
    Type: AWS::EC2::Subnet::Id
    Description: Subnets for the hosts

  SubnetIdLoadBalancer:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for the load balancer (specify at least 2)

  SslLoadBalancer:
    Type: String
    Description: SSL ARN from Certificate Manager

  DnsZone:
    Type: AWS::Route53::HostedZone::Id
    Description: Route53 hosted zone in which to place dns record

  DnsRecord:
    Type: String

Conditions:
  IsExternal:
    Fn::Equals:
      - Ref: LoadBalancerType
      - external

  PublicHosts:
    Fn::Equals:
      - Ref: HostType
      - public-ip

Resources:
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'opsworks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-OpsWorksDefaultPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'iam:PassRole'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'rds:*'
                Resource: '*'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-ec2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Get*'
                  - 'ec2:List*'
                  - 'ec2:Describe*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-CloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource:
                  - '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: 0.0.0.0/0

  SnapshotS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Ref: SnapshotBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  OpsWorksStack: 
    Type: AWS::OpsWorks::Stack
    Properties: 
      AgentVersion: LATEST
      Name: 
        Ref: AWS::StackName
      ServiceRoleArn: 
        Fn::GetAtt:
          - ServiceRole
          - Arn
      DefaultInstanceProfileArn: 
        Fn::GetAtt:
          - InstanceProfile
          - Arn
      ConfigurationManager:
        Name: Chef
        Version: '12'
      UseCustomCookbooks: true
      CustomCookbooksSource:
        Type: archive
        Url:
          Ref: CookbookUrl
      DefaultSubnetId:
        Ref: SubnetIdHost
      VpcId:
        Ref: VpcId
      UseOpsworksSecurityGroups: true
      DefaultOs: Ubuntu 18.04 LTS
      DefaultRootDeviceType: ebs
      CustomJson:
        Fn::Sub: |
          {
            "elasticsearch": {
              "region": "${AWS::Region}",
              "cluster_name": "${ClusterName}",
              "discovery_ec2_groups": "${Ec2SecurityGroup.GroupId}",
              "bucket_snapshot_name": "${SnapshotBucketName}",
              "cluster_initial_master_nodes": "elasticsearch-initial-1"
            },
            "cloudwatch": {
              "region": "${AWS::Region}"
            }
          }
      Tags:
        - Key: Application
          Value: ElasticSearch
        - Key: MaintainerName
          Value: Marius Mitrofan
        - Key: MaintainerTeam
          Value: NETBEARS
        - Key: MaintainerEmail
          Value: support@netbears.com

  Elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: Layer
    Properties:
      HealthCheck:
        HealthyThreshold: 2
        Interval: 10
        Target: HTTP:9200/
        Timeout: 5
        UnhealthyThreshold: 2
      Listeners:
        - InstancePort: 9200
          LoadBalancerPort: 9200
          Protocol: TCP
        - InstancePort: 5601
          LoadBalancerPort: 80
          Protocol: HTTP
          PolicyNames:
            - Fn::Sub: ${AWS::StackName}
        - InstancePort: 5601
          LoadBalancerPort: 5601
          Protocol: HTTP
          PolicyNames:
            - Fn::Sub: ${AWS::StackName}
        - InstancePort: 9300
          LoadBalancerPort: 9300
          Protocol: TCP
        - InstancePort: 5601
          LoadBalancerPort: 443
          Protocol: HTTPS
          PolicyNames:
            - Fn::Sub: ${AWS::StackName}
          SSLCertificateId:
            Ref: SslLoadBalancer
      Scheme:
        Fn::If:
          - IsExternal
          - internet-facing
          - internal
      SecurityGroups:
      - Ref: AlbSecurityGroup
      Subnets:
        Ref: SubnetIdLoadBalancer
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '300'
      LBCookieStickinessPolicy:
        - CookieExpirationPeriod: 600
          PolicyName:
            Ref: AWS::StackName

  Layer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: ElasticSearch
      Shortname: elasticsearch-
      Type: custom
      EnableAutoHealing: 'false'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps:
        Fn::If:
          - PublicHosts
          - 'true'
          - 'false'
      StackId:
        Ref: OpsWorksStack
      CustomRecipes:
        Setup:
          - 'elasticsearch_stack::setup'
      UseEbsOptimizedInstances: True
      CustomSecurityGroupIds:
        - Fn::GetAtt: Ec2SecurityGroup.GroupId

  ElbLayer:
    DependsOn: Elb
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties: 
      ElasticLoadBalancerName: 
        Ref: Elb
      LayerId: 
        Ref: Layer

  InstanceId1: 
    Type: AWS::OpsWorks::Instance
    DependsOn: Elb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Ref: SubnetIdHost
      Hostname: elasticsearch-initial-1
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  InstanceId2:
    Type: AWS::OpsWorks::Instance
    DependsOn: Elb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Ref: SubnetIdHost
      Hostname: elasticsearch-initial-2
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  InstanceId3:
    Type: AWS::OpsWorks::Instance
    DependsOn: Elb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Ref: SubnetIdHost
      Hostname: elasticsearch-initial-3
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: DnsZone
      Comment: 
        Fn::Sub: Route53-record-for-Kibana
      RecordSets:
      - Name:
          Ref: DnsRecord
        Type: A
        AliasTarget:
          HostedZoneId: 
            Fn::GetAtt:
              - Elb
              - CanonicalHostedZoneNameID
          DNSName: 
            Fn::GetAtt:
              - Elb
              - DNSName

Outputs:
  KibanaUrl:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-KibanaUrl"
    Value:
      Fn::Sub: "https://${DnsRecord}/app/kibana"

  OpsWorksStackId:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-OpsWorksStack"
    Value:
      Ref: OpsWorksStack

  LayerId:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Layer"
    Value:
      Ref: Layer

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: ElasticSearch
      Parameters:
      - ClusterName
      - SnapshotBucketName
      - LoadBalancerType
      - InstanceType
      - InstanceRootVolumeSize
      - CookbookUrl
      - NewVpc
      - VpcId
      - SubnetIdHost
      - SubnetIdLoadBalancer
      - HostType
      - SslLoadBalancer
      - DnsRecord
      - DnsZone