Description: Launch ElasticSearch opsworks stack within its own VPC or an existing VPC

Parameters:
  
  #ElasticSearch
  CookbookUrl:
    Type: String
    Default: 'https://github.com/netbears/opsworks-elasticsearch/releases/download/v1.0.0/cookbooks-v1.0.0.tar.gz'

  ClusterName:
    Type: String
    Default: 'es'

  OpsWorksStackName:
    Type: String
    Default: ElasticSearch

  SnapshotBucketName:
    Type: String
    Default: netbears-elasticsearch-backup-staging

  LoadBalancerType:
    Type: String
    Default: internal
    AllowedValues:
      - internal
      - external

  HostType:
    Type: String
    Default: private-ip
    AllowedValues:
      - private-ip
      - public-ip
    Description: It is recommended to not use public IPs for hosts, but you have the option to use public IPs as well if needed

  NumberOfNodes:
    Type: Number
    Default: '3'

  InstanceType:
    Type: String
    Default: 'i3.large'
    AllowedValues:
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge

  InstanceRootVolumeSize:
    Type: String
    Default: '50'
    Description: Size in GB of the root volume

  NewVpc:
    Type: String
    Default: new
    AllowedValues:
      - new
      - existing
    Description: If "new", CF will provision all necessary VPC settings and launch the stack in the new VPC

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Setting takes effect only if NewVpc is set to "existing"

  SubnetIdHost:
    Type: AWS::EC2::Subnet::Id
    Description: Setting takes effect only if NewVpc is set to "existing"

  SubnetIdLoadBalancer:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Setting takes effect only if CreateVpc is set to "existing" (specify at least 2)

  # Subnets
  VPCSubnetCidrBlock:
    Description: 172.17.0.0/16 = 172.17.0.0-172.17.255.255 = 256 Subnets = 65534 hosts
    Type: String
    Default: 172.17.0.0/16
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  AvailabilityZone1:
    Type: String
    Default: a
    AllowedValues:
    - a
    - b
    - c
  AvailabilityZone2:
    Type: String
    Default: b
    AllowedValues:
    - a
    - b
    - c
  AvailabilityZone3:
    Type: String
    Default: c
    AllowedValues:
    - a
    - b
    - c
  PublicSubnetCidrBlock1:
    Type: String
    Default: 172.17.0.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCidrBlock2:
    Type: String
    Default: 172.17.16.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCidrBlock3:
    Type: String
    Default: 172.17.32.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock1:
    Type: String
    Default: 172.17.48.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock2:
    Type: String
    Default: 172.17.64.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock3:
    Type: String
    Default: 172.17.80.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  # Remote Access Network
  RemoteCidrForSecurityGroup:
    Description: CIDR Block for SG to Grant Access to Instances (i.e. 192.168.100.0/24)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.17.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  RemoteCidrForPublicAcl:
    Description: CIDR Block for Public ACL to Grant Access to Network (i.e. 32.159.24.111/32)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  # Rule Numbers
  AllowAllInboundPublicRuleNumber:
    Type: Number
    Default: '100'
  AllowAllInboundPrivateRuleNumber:
    Type: Number
    Default: '100'
  AllowAllOutboundPublicRuleNumber:
    Type: Number
    Default: '100'
  AllowAllOutboundPrivateRuleNumber:
    Type: Number
    Default: '100'

Conditions:
  IsExternal:
    Fn::Equals:
      - Ref: LoadBalancerType
      - external

  CreateVpc:
    Fn::Equals:
      - Ref: NewVpc
      - new

  PublicHosts:
    Fn::Equals:
      - Ref: HostType
      - public-ip

Resources:
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'opsworks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-OpsWorksDefaultPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'iam:PassRole'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'rds:*'
                Resource: '*'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-ec2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Get*'
                  - 'ec2:List*'
                  - 'ec2:Describe*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-CloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource:
                  - '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: 0.0.0.0/0

  SnapshotS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Ref: SnapshotBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  OpsWorksStack: 
    Type: AWS::OpsWorks::Stack
    Properties: 
      AgentVersion: LATEST
      Name: 
        Ref: OpsWorksStackName
      ServiceRoleArn: 
        Fn::GetAtt:
          - ServiceRole
          - Arn
      DefaultInstanceProfileArn: 
        Fn::GetAtt:
          - InstanceProfile
          - Arn
      ConfigurationManager:
        Name: Chef
        Version: '12'
      UseCustomCookbooks: true
      CustomCookbooksSource:
        Type: archive
        Url:
          Ref: CookbookUrl
      DefaultSubnetId:
        Fn::If:
          - CreateVpc
          - Ref: PrivateSubnet1
          - Ref: SubnetIdHost
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      UseOpsworksSecurityGroups: true
      DefaultOs: Ubuntu 18.04 LTS
      DefaultRootDeviceType: ebs
      CustomJson:
        Fn::Sub: |
          {
            "elasticsearch": {
              "region": "${AWS::Region}",
              "cluster_name": "${ClusterName}",
              "discovery_ec2_groups": "${Ec2SecurityGroup.GroupId}",
              "bucket_snapshot_name": "${SnapshotBucketName}",
              "cluster_initial_master_nodes": "elasticsearch-initial-1"
            },
            "cloudwatch": {
              "region": "${AWS::Region}"
            }
          }
      Tags:
        - Key: Application
          Value: ElasticSearch
        - Key: MaintainerName
          Value: Marius Mitrofan
        - Key: MaintainerTeam
          Value: NETBEARS
        - Key: MaintainerEmail
          Value: support@netbears.com

  Elb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: Layer
    Properties:
      HealthCheck:
        HealthyThreshold: 2
        Interval: 10
        Target: HTTP:9200/
        Timeout: 5
        UnhealthyThreshold: 2
      Listeners:
        - InstancePort: 9200
          LoadBalancerPort: 9200
          Protocol: TCP
        - InstancePort: 5601
          LoadBalancerPort: 80
          Protocol: HTTP
          PolicyNames:
            - Fn::Sub: ${AWS::StackName}
        - InstancePort: 5601
          LoadBalancerPort: 5601
          Protocol: HTTP
          PolicyNames:
            - Fn::Sub: ${AWS::StackName}
        - InstancePort: 9300
          LoadBalancerPort: 9300
          Protocol: TCP
      Scheme:
        Fn::If:
          - IsExternal
          - internet-facing
          - internal
      SecurityGroups:
      - Ref: AlbSecurityGroup
      Subnets:
        Fn::If:
          - CreateVpc
          - Fn::If:
            - IsExternal
            - 
              - Ref: PublicSubnet1
              - Ref: PublicSubnet2
              - Ref: PublicSubnet3
            - 
              - Ref: PrivateSubnet1
              - Ref: PrivateSubnet2
              - Ref: PrivateSubnet3
          - Ref: SubnetIdLoadBalancer
      LBCookieStickinessPolicy:
        - CookieExpirationPeriod: 600
          PolicyName:
            Ref: AWS::StackName

  Layer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: ElasticSearch
      Shortname: elasticsearch-
      Type: custom
      EnableAutoHealing: 'false'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps:
        Fn::If:
          - PublicHosts
          - 'true'
          - 'false'
      StackId:
        Ref: OpsWorksStack
      CustomRecipes:
        Setup:
          - 'elasticsearch_stack::setup'
      UseEbsOptimizedInstances: True
      CustomSecurityGroupIds:
        - Fn::GetAtt: Ec2SecurityGroup.GroupId

  ElbLayer:
    DependsOn: Elb
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties: 
      ElasticLoadBalancerName: 
        Ref: Elb
      LayerId: 
        Ref: Layer

  InstanceId1: 
    Type: AWS::OpsWorks::Instance
    DependsOn: Elb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Fn::If:
          - CreateVpc
          - Ref: PrivateSubnet1
          - Ref: SubnetIdHost
      Hostname: elasticsearch-initial-1
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  InstanceId2:
    Type: AWS::OpsWorks::Instance
    DependsOn: Elb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Fn::If:
          - CreateVpc
          - Ref: PrivateSubnet2
          - Ref: SubnetIdHost
      Hostname: elasticsearch-initial-2
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  InstanceId3:
    Type: AWS::OpsWorks::Instance
    DependsOn: Elb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Fn::If:
          - CreateVpc
          - Ref: PrivateSubnet3
          - Ref: SubnetIdHost
      Hostname: elasticsearch-initial-3
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  VPC:
    Condition: CreateVpc
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Ref: VPCSubnetCidrBlock
      Tags:
      - Key: Name
        Value:
          Ref: "AWS::StackName"

  PublicSubnet1:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone1}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-publiz-az1"

  PublicSubnet2:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone2}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-az2"

  PublicSubnet3:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone3}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-az3"

  InternetGateway:
    Condition: CreateVpc
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-InternetGateway"

  GatewayToInternet:
    Condition: CreateVpc
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  NatGateway:
    Condition: CreateVpc
    Type: AWS::EC2::NatGateway
    DependsOn: GatewayToInternet
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-NatGateway"

  EIP:
    Condition: CreateVpc
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  PublicRouteTable:
    Condition: CreateVpc
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public"

  PublicRoute:
    Condition: CreateVpc
    Type: AWS::EC2::Route
    DependsOn:
    - PublicRouteTable
    - InternetGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetRouteTableAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet3
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable

  PrivateSubnet1:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone1}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az1"

  PrivateSubnet2:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone2}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az2"

  PrivateSubnet3:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone3}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az3"

  PrivateRouteTable:
    Condition: CreateVpc
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private"

  PrivateRoute:
    Condition: CreateVpc
    DependsOn:
    - PrivateRouteTable
    - NatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway

  PrivateSubnetRouteTableAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetRouteTableAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable

  S3VpcEndpoint:
    Condition: CreateVpc
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
    - VPC
    - PrivateRouteTable
    - PublicRouteTable
    Properties:
      PolicyDocument:
        Statement:
        - Action: "*"
          Effect: Allow
          Resource: "*"
          Principal: "*"
      RouteTableIds:
      - Ref: PrivateRouteTable
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: "com.amazonaws.${AWS::Region}.s3"
      VpcId:
        Ref: VPC

  # Public Network ACL
  PublicNetworkAcl:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-acl"
      
  # Public Network ACL Rules
  InboundPublicNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber:
        Ref: AllowAllInboundPublicRuleNumber
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPublicNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber:
        Ref: AllowAllOutboundPublicRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Public Subnet Association
  PublicSubnetNetworkAclAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet1
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet2
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PublicNetworkAcl

  PublicSubnetNetworkAclAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet3
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      NetworkAclId:
        Ref: PublicNetworkAcl

  # Private Network ACL
  PrivateNetworkAcl:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-acl"
      
  # Private Network ACL Rules
  InboundEphemeralPrivateNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber:
        Ref: AllowAllInboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPrivateNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber:
        Ref: AllowAllOutboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Private Subnet Associations
  PrivateSubnetNetworkAclAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      NetworkAclId:
        Ref: PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      NetworkAclId:
        Ref: PrivateNetworkAcl

  # Security Groups
  InternalAccessSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Instance to Instance Access in VPC
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-instance-to-instance"

  InternalAccessSecurityGroupIngress:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: InternalAccessSecurityGroup
    Properties:
      GroupId:
        Ref: InternalAccessSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: InternalAccessSecurityGroup

  RemoteAccessSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance Access over VPN/Direct Connect
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-remote-to-instance"
      SecurityGroupIngress:
      - IpProtocol: "-1"
        CidrIp:
          Ref: RemoteCidrForSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0

Outputs:
  DNSName:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-DNSName
    Value:
      Fn::GetAtt: Elb.DNSName

  CanonicalHostedZoneNameID:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CanonicalHostedZoneNameID
    Value:
      Fn::GetAtt: Elb.CanonicalHostedZoneNameID

  VpcId:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VpcId"
    Value:
      Ref: VPC

  PrivateSubnet1:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1"
    Value:
      Ref: PrivateSubnet1

  PrivateSubnet2:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2"
    Value:
      Ref: PrivateSubnet2

  PrivateSubnet3:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet3"
    Value:
      Ref: PrivateSubnet3

  PublicSubnet1:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1"
    Value:
      Ref: PublicSubnet1

  PublicSubnet2:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2"
    Value:
      Ref: PublicSubnet2

  PublicSubnet3:
    Condition: CreateVpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet3"
    Value:
      Ref: PublicSubnet3

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: ElasticSearch
      Parameters:
      - ClusterName
      - OpsWorksStackName
      - SnapshotBucketName
      - LoadBalancerType
      - NumberOfNodes
      - InstanceType
      - InstanceRootVolumeSize
      - CookbookUrl
      - NewVpc
      - VpcId
      - SubnetIdHost
      - SubnetIdLoadBalancer
      - HostType

    - Label:
        default: Remote Access
      Parameters:
      - RemoteCidrForSecurityGroup
      - RemoteCidrForPublicAcl
    - Label:
        default: Subnets
      Parameters:
      - VPCSubnetCidrBlock
      - PublicSubnetCidrBlock1
      - PublicSubnetCidrBlock2
      - PublicSubnetCidrBlock3
      - PrivateSubnetCidrBlock1
      - PrivateSubnetCidrBlock2
      - PrivateSubnetCidrBlock3
      - AvailabilityZone1
      - AvailabilityZone2
      - AvailabilityZone3
    - Label:
        default: Public ACL Rule Numbers
      Parameters:
      - AllowAllInboundPublicRuleNumber
      - AllowAllOutboundPublicRuleNumber
    - Label:
        default: Private ACL Rule Numbers
      Parameters:
      - AllowAllInboundPrivateRuleNumber
      - AllowAllOutboundPrivateRuleNumber
    ParameterLabels:
      RemoteCidrForSecurityGroup:
        default: Network CIDR for SG
      RemoteCidrForPublicAcl:
        default: Network CIDR for ACL
      VPCSubnetCidrBlock:
        default: VPC Subnet
      PublicSubnetCidrBlock1:
        default: Public Subnet 1
      PublicSubnetCidrBlock2:
        default: Public Subnet 2
      PublicSubnetCidrBlock3:
        default: Public Subnet 3
      PrivateSubnetCidrBlock1:
        default: Private Subnet 1
      PrivateSubnetCidrBlock2:
        default: Private Subnet 2
      PrivateSubnetCidrBlock3:
        default: Private Subnet 3
      AvailabilityZone1:
        default: Availability Zone 1
      AvailabilityZone2:
        default: Availability Zone 2
      AvailabilityZone3:
        default: Availability Zone 3
      AllowAllInboundPublicRuleNumber:
        default: Public Inbound
      AllowAllOutboundPublicRuleNumber:
        default: Public Outbound
      AllowAllInboundPrivateRuleNumber:
        default: Private Inbound
      AllowAllOutboundPrivateRuleNumber:
        default: Private Outbound