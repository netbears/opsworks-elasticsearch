Description: Launch ElasticSearch opsworks stack within an existing VPC

Parameters:
  
  #ElasticSearch
  CookbookUrl:
    Type: String
    Default: 'https://github.com/netbears/opsworks-elasticsearch/releases/download/v1.1.0/cookbooks-v1.1.0.tar.gz'

  ClusterName:
    Type: String
    Default: 'es'

  LoadBalancerType:
    Type: String
    Default: internal
    AllowedValues:
      - internal
      - external

  HostType:
    Type: String
    Default: private-ip
    AllowedValues:
      - private-ip
      - public-ip
    Description: It is recommended to not use public IPs for hosts, but you have the option to use public IPs as well if needed

  InstanceType:
    Type: String
    Default: 'i3.large'
    AllowedValues:
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge

  InstanceRootVolumeSize:
    Type: String
    Default: '50'
    Description: Size in GB of the root volume

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy the stack in

  SubnetIdHost:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for the hosts (specify at least 2)

  SubnetIdLoadBalancer:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for the load balancer (specify at least 2)

  SslLoadBalancer:
    Type: String
    Description: SSL ARN from Certificate Manager

  DnsZone:
    Type: AWS::Route53::HostedZone::Id
    Description: Route53 hosted zone in which to place dns record

  DnsRecord:
    Type: String

  DeployOpsWorksInstances:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  FilebeatNumberShards:
    Type: String
    Default: '1'

  FilebeatLogsExternal:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  FilebeatLogsHostname:
    Type: String
    Default: ''

  Environment:
    Type: String
    Default: UTILITIES

Conditions:
  IsExternal:
    Fn::Equals:
      - Ref: LoadBalancerType
      - external

  PublicHosts:
    Fn::Equals:
      - Ref: HostType
      - public-ip

  LaunchOpsWorksInstances:
    Fn::Equals:
      - Ref: DeployOpsWorksInstances
      - 'true'

Resources:
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'opsworks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-OpsWorksDefaultPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'iam:PassRole'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'rds:*'
                Resource: '*'

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-ec2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Get*'
                  - 'ec2:List*'
                  - 'ec2:Describe*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-CloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-ElbListAll
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:List*'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:Get*'
                Resource:
                  - '*'
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-ElbModifyTg
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'elasticloadbalancing:DeregisterTargets'
                Resource:
                  - Ref: TargetGroup9200
                  - Ref: TargetGroup9300
                  - Ref: TargetGroup5601

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  SnapshotS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  OpsWorksStack: 
    Type: AWS::OpsWorks::Stack
    Properties: 
      AgentVersion: LATEST
      Name: 
        Ref: AWS::StackName
      ServiceRoleArn: 
        Fn::GetAtt:
          - ServiceRole
          - Arn
      DefaultInstanceProfileArn: 
        Fn::GetAtt:
          - InstanceProfile
          - Arn
      ConfigurationManager:
        Name: Chef
        Version: '12'
      UseCustomCookbooks: true
      CustomCookbooksSource:
        Type: archive
        Url:
          Ref: CookbookUrl
      DefaultSubnetId:
        Fn::Select: [ 0, Ref: SubnetIdHost ]
      VpcId:
        Ref: VpcId
      UseOpsworksSecurityGroups: true
      DefaultOs: Ubuntu 18.04 LTS
      DefaultRootDeviceType: ebs
      CustomJson:
        Fn::Sub: |
          {
            "elasticsearch": {
              "region": "${AWS::Region}",
              "environment": "${Environment}",
              "cluster_name": "${ClusterName}",
              "discovery_ec2_groups": "${Ec2SecurityGroup.GroupId}",
              "bucket_snapshot_name": "${SnapshotS3Bucket}",
              "cluster_initial_master_nodes": [
                "elasticsearch-initial-1"
              ]
            },
            "filebeat": {
              "number_of_shards": "${FilebeatNumberShards}",
              "logs": {
                "external": "${FilebeatLogsExternal}",
                "hostname": "${FilebeatLogsHostname}"
              }
            },
            "cloudwatch": {
              "region": "${AWS::Region}"
            },
            "nlb": {
              "register": "true",
              "target_groups": {
                "9200": "${TargetGroup9200}",
                "9300": "${TargetGroup9300}",
                "5601": "${TargetGroup5601}"
              }
            }
          }
      Tags:
        - Key: Application
          Value: ElasticSearch
        - Key: MaintainerName
          Value: Marius Mitrofan
        - Key: MaintainerTeam
          Value: NETBEARS
        - Key: MaintainerEmail
          Value: support@netbears.com

  Nlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      LoadBalancerAttributes: 
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
        - Key: deletion_protection.enabled
          Value: 'true'
      Scheme:
        Fn::If:
          - IsExternal
          - internet-facing
          - internal
      Subnets: 
        Ref: SubnetIdLoadBalancer
      Type: network

  TargetGroup9200:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 9200
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: '9200'
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 10
      VpcId:
        Ref: VpcId

  TargetGroup9300:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 9300
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: '9300'
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 10
      VpcId:
        Ref: VpcId

  TargetGroup5601:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5601
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: '5601'
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 10
      VpcId:
        Ref: VpcId

  Listener9200:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup9200
          Type: forward
      LoadBalancerArn:
        Ref: Nlb
      Port: 9200
      Protocol: TCP

  Listener9300:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup9300
          Type: forward
      LoadBalancerArn:
        Ref: Nlb
      Port: 9300
      Protocol: TCP

  Listener5601:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup5601
          Type: forward
      LoadBalancerArn:
        Ref: Nlb
      Port: 5601
      Protocol: TCP


  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup5601
          Type: forward
      LoadBalancerArn:
        Ref: Nlb
      Port: 80
      Protocol: TCP

  Listener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup5601
          Type: forward
      LoadBalancerArn:
        Ref: Nlb
      Port: 443
      Protocol: TLS
      Certificates:
        - CertificateArn:
            Ref: SslLoadBalancer

  Layer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: ElasticSearch
      Shortname: elasticsearch-
      Type: custom
      EnableAutoHealing: 'false'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps:
        Fn::If:
          - PublicHosts
          - 'true'
          - 'false'
      StackId:
        Ref: OpsWorksStack
      CustomRecipes:
        Setup:
          - 'elasticsearch_stack::setup'
        Shutdown:
          - 'elasticsearch_stack::shutdown'
      UseEbsOptimizedInstances: True
      CustomSecurityGroupIds:
        - Fn::GetAtt: Ec2SecurityGroup.GroupId

  InstanceIdSubnet1: 
    Type: AWS::OpsWorks::Instance
    Condition: LaunchOpsWorksInstances
    DependsOn: Nlb
    Properties: 
      StackId: 
        Ref: OpsWorksStack
      LayerIds: 
        - Ref: Layer
      InstanceType:
        Ref: InstanceType
      RootDeviceType: ebs
      SubnetId:
        Fn::Select: [ 0, Ref: SubnetIdHost ]
      Hostname: elasticsearch-initial-1
      BlockDeviceMappings:
        - DeviceName: ROOT_DEVICE
          Ebs:
            VolumeType: gp2
            VolumeSize:
              Ref: InstanceRootVolumeSize

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: DnsZone
      Comment: 
        Fn::Sub: Route53-record-for-Kibana
      RecordSets:
      - Name:
          Ref: DnsRecord
        Type: A
        AliasTarget:
          HostedZoneId: 
            Fn::GetAtt:
              - Nlb
              - CanonicalHostedZoneID
          DNSName: 
            Fn::GetAtt:
              - Nlb
              - DNSName

Outputs:
  KibanaUrl:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-KibanaUrl"
    Value:
      Fn::Sub: "https://${DnsRecord}/app/kibana"

  OpsWorksStackId:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-OpsWorksStack"
    Value:
      Ref: OpsWorksStack

  LayerId:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Layer"
    Value:
      Ref: Layer

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: ElasticSearch
      Parameters:
      - ClusterName
      - LoadBalancerType
      - InstanceType
      - InstanceRootVolumeSize
      - CookbookUrl
      - NewVpc
      - VpcId
      - SubnetIdHost
      - SubnetIdLoadBalancer
      - HostType
      - SslLoadBalancer
      - DnsRecord
      - DnsZone
      - DeployOpsWorksInstances